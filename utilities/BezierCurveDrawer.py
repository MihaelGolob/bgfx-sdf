import numpy as np
import matplotlib.pyplot as plt
import re

def linear_segment(p0, p1, t):
    return (1 - t) * p0 + t * p1

def quadratic_bezier(p0, p1, p2, t):
    return (1 - t)**2 * p0 + 2 * (1 - t) * t * p1 + t**2 * p2

def cubic_bezier(p0, p1, p2, p3, t):
    return (1 - t)**3 * p0 + 3 * (1 - t)**2 * t * p1 + 3 * (1 - t) * t**2 * p2 + t**3 * p3

def plot_bezier_curve(points, bezier_func, color='blue', num_points=100):
    t_values = np.linspace(0, 1, num_points)
    curve_points = np.array([bezier_func(*points, t) for t in t_values])
    plt.plot(curve_points[:, 0], curve_points[:, 1], color=color)

def parse_curve_input(input_str):
    pattern = re.compile(r'\(([^)]+)\)')
    curves = []
    for line in input_str.strip().split('\n'):
        points = pattern.findall(line)
        points = [tuple(map(float, point.split(','))) for point in points]
        curves.append({'points': points})
    return curves

# Input string
input_str = """
[(1980.000000,1462.000000),(1608.000000,0.000000)]
[(1608.000000,0.000000),(1255.000000,0.000000)]
[(1255.000000,0.000000),(1057.000000,768.000000)]
[(1057.000000,768.000000),(1051.000000,790.000000),(1041.000000,835.000000)]
[(1041.000000,835.000000),(1031.000000,880.000000),(1020.000000,933.000000)]
[(1020.000000,933.000000),(1009.000000,987.000000),(1000.000000,1034.000000)]
[(1000.000000,1034.000000),(992.000000,1082.000000),(989.000000,1110.000000)]
[(989.000000,1110.000000),(986.000000,1082.000000),(977.000000,1035.000000)]
[(977.000000,1035.000000),(969.000000,988.000000),(958.000000,935.000000)]
[(958.000000,935.000000),(948.000000,882.000000),(938.000000,836.000000)]
[(938.000000,836.000000),(928.000000,790.000000),(922.000000,766.000000)]
[(922.000000,766.000000),(725.000000,0.000000)]
[(725.000000,0.000000),(373.000000,0.000000)]
[(373.000000,0.000000),(0.000000,1462.000000)]
[(0.000000,1462.000000),(305.000000,1462.000000)]
[(305.000000,1462.000000),(492.000000,664.000000)]
[(492.000000,664.000000),(500.000000,628.000000),(510.000000,578.000000)]
[(510.000000,578.000000),(521.000000,528.000000),(531.000000,473.000000)]
[(531.000000,473.000000),(542.000000,419.000000),(550.000000,368.000000)]
[(550.000000,368.000000),(559.000000,318.000000),(563.000000,281.000000)]
[(563.000000,281.000000),(568.000000,319.000000),(576.000000,369.000000)]
[(576.000000,369.000000),(584.000000,420.000000),(593.000000,472.000000)]
[(593.000000,472.000000),(603.000000,525.000000),(613.000000,570.000000)]
[(613.000000,570.000000),(623.000000,615.000000),(631.000000,643.000000)]
[(631.000000,643.000000),(844.000000,1462.000000)]
[(844.000000,1462.000000),(1137.000000,1462.000000)]
[(1137.000000,1462.000000),(1350.000000,643.000000)]
[(1350.000000,643.000000),(1357.000000,616.000000),(1366.000000,570.000000)]
[(1366.000000,570.000000),(1376.000000,525.000000),(1386.000000,472.000000)]
[(1386.000000,472.000000),(1396.000000,419.000000),(1404.000000,368.000000)]
[(1404.000000,368.000000),(1413.000000,318.000000),(1417.000000,281.000000)]
[(1417.000000,281.000000),(1424.000000,331.000000),(1436.000000,402.000000)]
[(1436.000000,402.000000),(1449.000000,474.000000),(1463.000000,545.000000)]
[(1463.000000,545.000000),(1478.000000,616.000000),(1489.000000,664.000000)]
[(1489.000000,664.000000),(1675.000000,1462.000000)]
[(1675.000000,1462.000000),(1980.000000,1462.000000)]
"""

# Parse the input string
curves = parse_curve_input(input_str)

# Convert points to np.array and determine curve type
for curve in curves:
    curve['points'] = [np.array(point) for point in curve['points']]
    num_points = len(curve['points'])
    if num_points == 2:
        curve['type'] = 'linear'
    elif num_points == 3:
        curve['type'] = 'quadratic'
    elif num_points == 4:
        curve['type'] = 'cubic'
    else:
        raise ValueError("Unsupported number of points for a Bezier curve")

# Plot all curves in the same figure
plt.figure()
for curve in curves:
    color = curve.get('color', 'blue')
    if curve['type'] == 'linear':
        plot_bezier_curve(curve['points'], linear_segment, color=color)
    elif curve['type'] == 'quadratic':
        plot_bezier_curve(curve['points'], quadratic_bezier, color=color)
    elif curve['type'] == 'cubic':
        plot_bezier_curve(curve['points'], cubic_bezier, color=color)

plt.title('Linear, Quadratic, and Cubic Bezier Curves')
plt.show()